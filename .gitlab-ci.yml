# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: trenkwalder/cpp-dev-ubuntu:20.04

stages: 
  - build
  - test
  - run

before_script:
  - apt update 
  - apt upgrade -y


build:
  stage: build

  before_script: 
    - apt update 
    - apt upgrade -y
    - apt-get install -y -qq make autoconf cmake valgrind build-essential libgtest-dev
  
  script:
    - mkdir build
    - cd build/
    - cmake ..
    - make all

  artifacts:
    paths:
      - build/tests/tests
      - build/tests/tests_coverage
      - build/application
      - build/application.lib.so

# run tests using the binary built before
general-test:
  stage: test
  script:
    - build/tests/tests

memory-test:
  stage: test

  before_script: 
    - apt update 
    - apt upgrade -y
    - apt-get install -y -qq valgrind
    
  script:
    - valgrind --leak-check=full --show-leak-kinds=all --tool=memcheck --log-file="tests_valgrind.log" build/tests/tests
    
  artifacts:
    paths:
      - tests_valgrind.log

coverage-test:
  stage: test

  before_script: 
    - apt update 
    - apt upgrade -y
    - apt-get install -y -qq lcov
    
  script:
    - mkdir coverage
    - valgrind --leak-check=full --show-leak-kinds=all --tool=memcheck --log-file="tests_coverage_valgrind.log" build/tests/tests_coverage
    - lcov --capture --directory build/tests/CMakeFiles/tests_coverage.dir --output-file coverage.info
    - genhtml coverage.info --output-directory coverage/
    - bash <(curl -s https://codecov.io/bash) -t .codecov
    
  artifacts:
    paths:
      - tests_coverage_valgrind.log
      - coverage.info
      - coverage/
  
static-test:
  stage: test

  before_script: 
    - apt update 
    - apt upgrade -y
    - apt-get install -y -qq cppcheck
    
  script:
    - cppcheck --language=c++ --std=c++20 --enable=all src/* 2>build/cppcheck.log
    
  artifacts:
    paths:
      - build/cppcheck.log
  allow_failure: true

run:
  stage: run
  script:
    - build/application
